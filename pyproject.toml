[tool.poetry]
name = "footy-brain"
version = "5.0.0"
description = "Real-time football data ingestion and analysis platform with live betting odds"
authors = ["Footy-Brain Team <team@footy-brain.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/footy-brain/footy-brain"
repository = "https://github.com/footy-brain/footy-brain"
documentation = "https://docs.footy-brain.com"
keywords = ["football", "betting", "odds", "real-time", "api", "timescaledb"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Database :: Database Engines/Servers",
]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.110.0"
uvicorn = {extras = ["standard"], version = "^0.27.0"}
sqlmodel = "^0.0.16"
asyncpg = "^0.29.0"
psycopg2-binary = "^2.9.9"
redis = "^5.0.1"
celery = "^5.3.4"
pydantic = "^2.5.3"
pydantic-settings = "^2.1.0"
pyyaml = "^6.0.1"
httpx = "^0.26.0"
websockets = "^12.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"
jinja2 = "^3.1.3"
aiofiles = "^23.2.1"
croniter = "^2.0.1"
structlog = "^23.2.0"
rich = "^13.7.0"
typer = "^0.9.0"
alembic = "^1.13.1"
prometheus-client = "^0.19.0"
opentelemetry-api = "^1.22.0"
opentelemetry-sdk = "^1.22.0"
opentelemetry-instrumentation-fastapi = "^0.43b0"
opentelemetry-instrumentation-sqlalchemy = "^0.43b0"
opentelemetry-instrumentation-redis = "^0.43b0"
opentelemetry-exporter-prometheus = "^1.12.0rc1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.4"
pytest-asyncio = "^0.23.2"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
httpx = "^0.26.0"
ruff = "^0.1.9"
mypy = "^1.8.0"
black = "^23.12.1"
isort = "^5.13.2"
pre-commit = "^3.6.0"
bandit = "^1.7.5"
safety = "^2.3.5"
coverage = "^7.3.4"
faker = "^22.0.0"
factory-boy = "^3.3.0"
freezegun = "^1.4.0"
respx = "^0.20.2"

[tool.poetry.group.tools.dependencies]
requests = "^2.31.0"
aiohttp = "^3.9.1"
tenacity = "^8.2.3"
cachetools = "^5.3.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "FBT"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
plugins = ["pydantic.mypy", "sqlmodel.mypy"]

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "redis.*",
    "asyncpg.*",
    "psycopg2.*",
    "croniter.*",
    "prometheus_client.*",
    "opentelemetry.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "db: marks tests as database tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["apps", "tools"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["apps", "tools"]
known_third_party = ["fastapi", "sqlmodel", "pydantic", "celery", "redis"]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]
