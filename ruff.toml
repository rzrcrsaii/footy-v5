# Footy-Brain v5 Ruff Configuration
# Fast Python linter and formatter

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "I",    # isort
    "N",    # pep8-naming
    "C4",   # flake8-comprehensions
    "ICN",  # flake8-import-conventions
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # NumPy-specific rules
    "PERF", # Perflint
    "FURB", # refurb
    "LOG",  # flake8-logging
    "RUF",  # Ruff-specific rules
]

ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    # Allow print statements (useful for debugging)
    "T201",
    # Allow TODO comments
    "FIX002",
    # Allow relative imports
    "TID252",
    # Allow magic value comparisons
    "PLR2004",
    # Allow too many arguments
    "PLR0913",
    # Allow too many branches
    "PLR0912",
    # Allow too many statements
    "PLR0915",
    # Allow unused arguments (common in async functions)
    "ARG001", "ARG002",
    # Allow exception without raise
    "TRY301",
    # Allow broad exception catching
    "BLE001",
    # Allow logging with f-string
    "G004",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic"

[lint.per-file-ignores]
# Tests can use magic values, assertions, and imports
"tests/**/*" = ["PLR2004", "S101", "TID252", "ARG", "PLR0913"]
# Scripts can use print statements
"scripts/**/*" = ["T201"]
# Allow star imports in __init__.py files
"__init__.py" = ["F401", "F403"]
# Allow print in main files
"main.py" = ["T201"]
# Allow unused imports in __init__.py
"*/__init__.py" = ["F401"]

[lint.isort]
known-first-party = ["tools", "apps", "config", "database"]
force-single-line = false
lines-after-imports = 2
no-lines-before = ["future", "standard-library"]

[lint.flake8-tidy-imports]
ban-relative-imports = "all"

[lint.flake8-type-checking]
strict = false

[lint.pylint]
max-args = 10
max-branches = 15
max-returns = 8
max-statements = 60

[lint.mccabe]
max-complexity = 15
